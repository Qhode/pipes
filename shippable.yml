resources:
  - name: pipes_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Qhode/pipes"
      branch: master

  - name: prov_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Qhode/provision"
      branch: master

  # Terraform State for Kermit
  - name: kermit_saas_state
    type: state

  # PEM key for AWS RC account
  - name: kermit_aws_pem
    type: integration
    integration: aws-rc-pem

  # CREDS for AWS RC account
  - name: kermit_aws_key
    type: integration
    integration: aws_rc_access

  - name: kermit_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Shippable/kermit"
      branch: master

  - name: ribbit_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Shippable/ribbit"
      branch: master

  - name: knodeInit_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Shippable/kermit-nodeInit"
      branch: master

  - name: kreqProc_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Shippable/kermit-reqProc"
      branch: master

  - name: kreqKick_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Shippable/kermit-reqKick"
      branch: master

  - name: kexecTemplates_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "Shippable/kermit-execTemplates"
      branch: master

  - name: u16node_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "dry-dock/u16node"
      branch: master

  - name: u18node_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "dry-dock/u18node"
      branch: master

  - name: c7node_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "dry-dock/c7node"
      branch: master

  - name: w19node_repo
    type: gitRepo
    integration: "qhode_gh"
    pointer:
      sourceName: "dry-dock/w19node"
      branch: master

  - name: kmicro_img
    type: image
    integration: aws_bits_access
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/kmicro"
      versionName: master

  - name: kapi_img
    type: image
    integration: aws_bits_access
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/kapi"
      versionName: master

  - name: kwww_img
    type: image
    integration: aws_bits_access
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/kwww"
      versionName: master

  - name: kribbit_img
    type: image
    integration: aws_bits_access
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/kribbit"
      versionName: master

  - name: kreqProc_img
    type: image
    integration: qhodeDH
    versionTemplate:
      sourceName: "drydock/kermit-u16reqproc"
      versionName: master

  - name: kermit_bits_cli
    type: cliConfig
    integration: aws_bits_access
    pointer:
      region: us-east-1

  - name: drydock_cli
    type: cliConfig
    integration: qhodeDH

  - name: aws_x8664_u16_img_params
    type: params
    version:
      params:
        SOURCE_AMI: "ami-66506c1c"
        VPC_ID: "vpc-266f3241"
        SUBNET_ID: "subnet-6df12f24"
        SECURITY_GROUP_ID: "sg-f634518c"
        REGION: "us-east-1"

jobs:
  - name: kermit_prov
    type: runSh
    steps:
      - IN: kermit_aws_pem
        switch: off
      - IN: kermit_aws_key
        switch: off
      - IN: kermit_saas_state
        switch: off
      - IN: prov_repo
        switch: off
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "prov_repo")
            - ./provision.sh kermit saas
      - OUT: kermit_saas_state
    on_success:
      script:
        - echo "SUCCESS"
    on_failure:
      - script: echo 'FAILURE!'
    always:
      script:
        - ./archiveProvisionState.sh kermit saas
        - popd

  - name: kmicro_build
    type: runSh
    steps:
      - IN: kermit_repo
      - IN: kermit_bits_cli
        scopes:
          - ecr
        switch: off
      - TASK:
          name: micro_build
          runtime:
            options:
              env:
                - IMG_OUT: "kmicro_img"
                - RES_REPO: "kermit_repo"
                - IMG: "kmicro"
                - REL_VER: "master"

          script:
            - pushd $(shipctl get_resource_state "$RES_REPO")
#            - npm install -g jshint@v2.9.7
#            - pushd nod
#            - jshint .
#            - popd
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - docker build -t=$IMG_NAME:$REL_VER .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: kmicro_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"

  - name: kapi_build
    type: runSh
    steps:
      - IN: kermit_repo
      - IN: knodeInit_repo
      - IN: kreqKick_repo
      - IN: kermit_bits_cli
        scopes:
          - ecr
        switch: off
      - TASK:
          name: kapi_build
          runtime:
            options:
              env:
                - IMG_OUT: "kapi_img"
                - RES_REPO: "kermit_repo"
                - IMG: "kapi"
                - REL_VER: "master"

          script:
            - pushd $(shipctl get_resource_state "$RES_REPO")/nod/api
            #            - npm install -g jshint@v2.9.7
            #            - pushd nod
            #            - jshint .
            #            - popd
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - docker build -t=$IMG_NAME:$REL_VER .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: kapi_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"

  - name: kwww_build
    type: runSh
    steps:
      - IN: kermit_repo
      - IN: kermit_bits_cli
        scopes:
          - ecr
        switch: off
      - TASK:
          name: kwww_build
          runtime:
            options:
              env:
                - IMG_OUT: "kwww_img"
                - RES_REPO: "kermit_repo"
                - IMG: "kwww"
                - REL_VER: "master"

          script:
            - pushd $(shipctl get_resource_state "$RES_REPO")/nod/www
            #            - npm install -g jshint@v2.9.7
            #            - pushd nod
            #            - jshint .
            #            - popd
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - docker build -t=$IMG_NAME:$REL_VER .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: kwww_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"

  - name: kribbit_build
    type: runSh
    steps:
      - IN: ribbit_repo
      - IN: kermit_bits_cli
        scopes:
          - ecr
        switch: off
      - TASK:
          name: kribbit_build
          runtime:
            options:
              env:
                - IMG_OUT: "kribbit_img"
                - RES_REPO: "ribbit_repo"
                - IMG: "kribbit"
                - REL_VER: "master"

          script:
            - pushd $(shipctl get_resource_state "$RES_REPO")
            #            - npm install -g jshint@v2.9.7
            #            - pushd nod
            #            - jshint .
            #            - popd
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - docker build -t=$IMG_NAME:$REL_VER -f build/docker/Dockerfile.Ubuntu .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: kribbit_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"

  - name: kermit_deploy
    type: runSh
    dependencyMode: strict
    runtime:
      timeoutMinutes: 15
    steps:
      - IN: kribbit_img
      - IN: kwww_img
      - IN: kapi_img
      - IN: kmicro_img
      - IN: kermit_bits_cli
        scopes:
          - ecr
        switch: off
      - IN: pipes_repo
        switch: off
      - IN: kermit_aws_pem
        switch: off
      - IN: kermit_saas_state
        switch: off
      - TASK:
          runtime:
            options:
              env:
                - RES_PEM: "kermit_aws_pem"
                - BASTION_USER: "ec2-user"
                - ONEBOX_USER: "ubuntu"
                - DEPLOY_VERSION: "master"
          name: deploy_to_ob
          script:
            - export BASTION_IP=$(shipctl get_resource_version_key kermit_saas_state nat_pub_ip)
            - export ONEBOX_IP=$(shipctl get_resource_version_key kermit_saas_state onebox_priv_ip)
            - export KRIBBIT_IMG=$(shipctl get_resource_version_key kribbit_img IMG_NAME)
            - export KWWW_IMG=$(shipctl get_resource_version_key kwww_img IMG_NAME)
            - export KAPI_IMG=$(shipctl get_resource_version_key kapi_img IMG_NAME)
            - export KMICRO_IMG=$(shipctl get_resource_version_key kmicro_img IMG_NAME)
            - pushd $(shipctl get_resource_state "pipes_repo")
            - ./deployKermit.sh
            - popd

  - name: kreqProc_x8664_u16_build
    type: runSh
    steps:
      - IN: kreqProc_repo
      - IN: kexecTemplates_repo
      - IN: drydock_cli
        switch: off
      - TASK:
          name: kreqProc_build
          runtime:
            options:
              env:
                - IMG_OUT: "kreqProc_img"
                - RES_REPO: "kreqProc_repo"
                - IMG: "kreqProc"
                - REL_VER: "master"
                - OS: Ubuntu_16.04
                - ARCH: x86_64

          script:
            - pushd $(shipctl get_resource_state "$RES_REPO")
            #            - npm install -g jshint@v2.9.7
            #            - pushd nod
            #            - jshint .
            #            - popd
            - IMG_NAME=$(shipctl get_resource_version_key "$IMG_OUT" "sourceName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - sed -i "s/{{%TAG%}}/$REL_VER/g" ./image/$ARCH/$OS/Dockerfile
            - docker build --pull --no-cache -t=$IMG_NAME:$REL_VER -f image/$ARCH/$OS/Dockerfile .
            - docker push $IMG_NAME:$REL_VER
      - OUT: kreqProc_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "commitSha=$REPO_COMMIT" "IMG_NAME=$IMG_NAME" "IMG_TAG=$REL_VER"

  - name: prep_aws_x8664_u16_img
    type: runSh
    dependencyMode: strict
    steps:
      - IN: kermit_bits_cli
        switch: off
      - IN: aws_x8664_u16_img_params
        switch: off
      - IN: knodeInit_repo
      - IN: kreqKick_repo
      - IN: kreqProc_img
      - IN: pipes_repo
        switch: off
      - TASK:
          name: prep_aws_x8664_u16_img
          runtime:
            options:
              env:
                - OS: Ubuntu_16.04
                - ARCH: x86_64
          script:
            - pushd $(shipctl get_resource_state "pipes_repo")
            - cd aws/$ARCH/$OS
            - ./pack.sh prep_aws_x8664_u16_img kermit_bits_cli
            - popd
    on_failure:
      - script: cat $(shipctl get_resource_state pipes_repo)/aws/$ARCH/$OS/output.txt

  - name: u16node_x8664_build
    type: runSh
    dependencyMode: strict
    steps:
      - IN: u16node_repo
      - IN: drydock_cli
      - TASK:
          name: u16node_build
          runtime:
            options:
              env:
                - IMG_REPO_NAME: "drydock"
                - IMG_NAME: "u16node"
                - REL_VER: "master"
          script:
            - pushd $(shipctl get_resource_state u16node_repo)
            - docker build -t=$IMG_REPO_NAME/$IMG_NAME:$REL_VER .
            - docker push $IMG_REPO_NAME/$IMG_NAME:$REL_VER

  - name: u18repLib_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: kermit_repo
      - IN: kermit_bits_cli
        switch: off
      - TASK:
          name: reports_lib_build
          runtime:
            options:
              env:
                - ARCHITECTURE: "x86_64"
                - OS: "Ubuntu_18.04"
                - TAG_VER: "master"
                - RES_REPO: "kermit_repo"
                - S3_URL: "s3://shippable-artifacts/reports"
                - WEB_URL: "https://s3.amazonaws.com/shippable-artifacts/reports"
                - REPORTS_PATH: "./gol/src/github.com/Shippable/reports"
              imageName: drydock/u14golall
              imageTag: v6.4.4
          script:
            - gvm use go1.9.5
            ## This removes the line from /etc/drydock/.env file that sources gvm command.
            - cd /etc/drydock/ && sed -i '$ d' .env
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - TAR_FILENAME="reports-$TAG_VER-$ARCHITECTURE-$OS.tar.gz"
            - REPO_DIR=$(shipctl get_resource_state "$RES_REPO")
            - export GOPATH="$REPO_DIR/gol"
            - pushd $REPO_DIR
            - cd $REPORTS_PATH && ./package/$ARCHITECTURE/$OS/package.sh
            - tar -zcvf "$TAR_FILENAME" -C "$GOPATH/bin" .
            - aws s3 cp --acl public-read "$TAR_FILENAME" "$S3_URL/$TAG_VER/"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REPO_COMMIT" "TAG_VER=$TAG_VER" "FILE_REPO_COMMIT_SHA=$REPO_COMMIT" "WEB_URL=$WEB_URL" "S3_URL=$S3_URL" "TAR_FILENAME=$TAR_FILENAME" "ARCHITECTURE=$ARCHITECTURE" "OS=$OS"

  - name: u18node_x8664_build
    type: runSh
    dependencyMode: strict
    steps:
      - IN: u18node_repo
      - IN: drydock_cli
      - TASK:
          name: u18node_build
          runtime:
            options:
              env:
                - IMG_REPO_NAME: "drydock"
                - IMG_NAME: "u18node"
                - REL_VER: "master"
          script:
            - pushd $(shipctl get_resource_state u18node_repo)
            - docker build -t=$IMG_REPO_NAME/$IMG_NAME:$REL_VER .
            - docker push $IMG_REPO_NAME/$IMG_NAME:$REL_VER

  - name: c7node_x8664_build
    type: runSh
    dependencyMode: strict
    steps:
      - IN: c7node_repo
      - IN: drydock_cli
      - TASK:
          name: c7node_build
          runtime:
            options:
              env:
                - IMG_REPO_NAME: "drydock"
                - IMG_NAME: "c7node"
                - REL_VER: "master"
          script:
            - pushd $(shipctl get_resource_state c7node_repo)
            - docker build -t=$IMG_REPO_NAME/$IMG_NAME:$REL_VER .
            - docker push $IMG_REPO_NAME/$IMG_NAME:$REL_VER

  - name: w19node_x8664_build
    type: runSh
    dependencyMode: strict
    steps:
      - IN: w19node_repo
      - IN: drydock_cli
      - TASK:
          name: w19node_build
          runtime:
            options:
              env:
                - IMG_REPO_NAME: "drydock"
                - IMG_NAME: "w19node"
                - REL_VER: "master"
          script:
            - pushd $(shipctl get_resource_state w19node_repo)
            - docker build -t=$IMG_REPO_NAME/$IMG_NAME:$REL_VER .
            - docker push $IMG_REPO_NAME/$IMG_NAME:$REL_VER
